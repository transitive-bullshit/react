// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActionMenu renders consistently 1`] = `
.c0 {
  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
  line-height: 1.5;
  color: #24292f;
}

.c2 {
  display: inline-block;
  margin-left: 8px;
}

.c1 {
  border-radius: 6px;
  border: 1px solid;
  border-color: rgba(27,31,36,0.15);
  font-family: inherit;
  font-weight: 600;
  line-height: 20px;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  display: grid;
  grid-template-areas: "leadingIcon text trailingIcon";
  padding-top: 5px;
  padding-bottom: 5px;
  padding-left: 16px;
  padding-right: 16px;
  font-size: 14px;
  color: #24292f;
  background-color: #f6f8fa;
  box-shadow: 0 1px 0 rgba(27,31,36,0.04),inset 0 1px 0 rgba(255,255,255,0.25);
}

.c1:focus {
  outline: none;
}

.c1:disabled {
  cursor: default;
  color: #8c959f;
}

.c1:disabled [data-component=ButtonCounter] {
  color: inherit;
}

.c1:disabled svg {
  opacity: 0.6;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 [data-component="leadingIcon"] {
  grid-area: leadingIcon;
}

.c1 [data-component="text"] {
  grid-area: text;
}

.c1 [data-component="trailingIcon"] {
  grid-area: trailingIcon;
}

.c1 [data-component=ButtonCounter] {
  font-size: 14px;
}

.c1:hover:not([disabled]) {
  background-color: #f3f4f6;
}

.c1:focus:not([disabled]) {
  box-shadow: 0 0 0 3px rgba(9,105,218,0.3);
}

.c1:active:not([disabled]) {
  background-color: hsla(220,14%,93%,1);
  border-color: rgba(27,31,36,0.15);
}

.c1[aria-expanded=true] {
  background-color: hsla(220,14%,93%,1);
  border-color: rgba(27,31,36,0.15);
}

.c1 [data-component=trailingIcon] {
  margin-left: -4px;
  margin-right: -4px;
}

@media (forced-colors:active) {
  .c1:focus {
    outline: solid 1px transparent;
  }
}

<div
  className="c0"
  color="fg.default"
  data-portal-root={true}
  fontFamily="normal"
>
  <button
    aria-expanded={false}
    aria-haspopup="true"
    className="c1"
    id="react-aria-1"
    onClick={[Function]}
    onKeyDown={[Function]}
    tabIndex={0}
    type="button"
  >
    <span
      data-component="text"
    >
      Toggle Menu
    </span>
    <span
      className="c2"
      data-component="trailingIcon"
    >
      <svg
        aria-hidden="true"
        className="octicon octicon-triangle-down"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<path d=\\"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z\\"></path>",
          }
        }
        fill="currentColor"
        height={16}
        role="img"
        style={
          Object {
            "display": "inline-block",
            "overflow": "visible",
            "userSelect": "none",
            "verticalAlign": "text-bottom",
          }
        }
        viewBox="0 0 16 16"
        width={16}
      />
    </span>
  </button>
</div>
`;
